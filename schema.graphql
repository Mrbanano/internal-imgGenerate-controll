# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  second_name: String
  lastname: String
  second_lastname: String
  email: String
  phone: String
  gender: String
  reference: UserReferenceType
  country: String
  state: String
  city: String
  password: PasswordState
  birthDate: String
  onBoardingStep: Int
  createdAt: DateTime
  rol: UserRolType
  registerDevice: String
  customerId: String
}

enum UserReferenceType {
  facebook
  linkedIn
  instagram
  twitter
  google
  friend
  otro
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum UserRolType {
  admin
  user
  moderator
}

input UserWhereUniqueInput {
  id: ID
  email: String
  customerId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  second_name: StringFilter
  lastname: StringFilter
  second_lastname: StringFilter
  email: StringFilter
  phone: StringFilter
  gender: StringNullableFilter
  reference: UserReferenceTypeNullableFilter
  country: StringFilter
  state: StringFilter
  city: StringFilter
  birthDate: StringFilter
  onBoardingStep: IntFilter
  createdAt: DateTimeNullableFilter
  rol: UserRolTypeNullableFilter
  registerDevice: StringFilter
  customerId: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input UserReferenceTypeNullableFilter {
  equals: UserReferenceType
  in: [UserReferenceType!]
  notIn: [UserReferenceType!]
  not: UserReferenceTypeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserRolTypeNullableFilter {
  equals: UserRolType
  in: [UserRolType!]
  notIn: [UserRolType!]
  not: UserRolTypeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  second_name: OrderDirection
  lastname: OrderDirection
  second_lastname: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  gender: OrderDirection
  reference: OrderDirection
  country: OrderDirection
  state: OrderDirection
  city: OrderDirection
  birthDate: OrderDirection
  onBoardingStep: OrderDirection
  createdAt: OrderDirection
  rol: OrderDirection
  registerDevice: OrderDirection
  customerId: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  second_name: String
  lastname: String
  second_lastname: String
  email: String
  phone: String
  gender: String
  reference: UserReferenceType
  country: String
  state: String
  city: String
  password: String
  birthDate: String
  onBoardingStep: Int
  createdAt: DateTime
  rol: UserRolType
  registerDevice: String
  customerId: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  second_name: String
  lastname: String
  second_lastname: String
  email: String
  phone: String
  gender: String
  reference: UserReferenceType
  country: String
  state: String
  city: String
  password: String
  birthDate: String
  onBoardingStep: Int
  createdAt: DateTime
  rol: UserRolType
  registerDevice: String
  customerId: String
}

type GenerationRecord {
  id: ID!
  generationID: String
  generatedBy: User
  generation: String
  status: String
  apiCreditCost: Float
  updatedAt: DateTime
  createdAt: DateTime
}

input GenerationRecordWhereUniqueInput {
  id: ID
  generationID: String
}

input GenerationRecordWhereInput {
  AND: [GenerationRecordWhereInput!]
  OR: [GenerationRecordWhereInput!]
  NOT: [GenerationRecordWhereInput!]
  id: IDFilter
  generationID: StringFilter
  generatedBy: UserWhereInput
  generation: StringFilter
  status: StringNullableFilter
  apiCreditCost: FloatFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input GenerationRecordOrderByInput {
  id: OrderDirection
  generationID: OrderDirection
  generation: OrderDirection
  status: OrderDirection
  apiCreditCost: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input GenerationRecordUpdateInput {
  generationID: String
  generatedBy: UserRelateToOneForUpdateInput
  generation: String
  status: String
  apiCreditCost: Float
  updatedAt: DateTime
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input GenerationRecordUpdateArgs {
  where: GenerationRecordWhereUniqueInput!
  data: GenerationRecordUpdateInput!
}

input GenerationRecordCreateInput {
  generationID: String
  generatedBy: UserRelateToOneForCreateInput
  generation: String
  status: String
  apiCreditCost: Float
  updatedAt: DateTime
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Balance {
  id: ID!
  user: User
  balance: Int
  updatedAt: DateTime
  createdAt: DateTime
}

input BalanceWhereUniqueInput {
  id: ID
}

input BalanceWhereInput {
  AND: [BalanceWhereInput!]
  OR: [BalanceWhereInput!]
  NOT: [BalanceWhereInput!]
  id: IDFilter
  user: UserWhereInput
  balance: IntFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input BalanceOrderByInput {
  id: OrderDirection
  balance: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input BalanceUpdateInput {
  user: UserRelateToOneForUpdateInput
  balance: Int
  updatedAt: DateTime
  createdAt: DateTime
}

input BalanceUpdateArgs {
  where: BalanceWhereUniqueInput!
  data: BalanceUpdateInput!
}

input BalanceCreateInput {
  user: UserRelateToOneForCreateInput
  balance: Int
  updatedAt: DateTime
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGenerationRecord(data: GenerationRecordCreateInput!): GenerationRecord
  createGenerationRecords(data: [GenerationRecordCreateInput!]!): [GenerationRecord]
  updateGenerationRecord(where: GenerationRecordWhereUniqueInput!, data: GenerationRecordUpdateInput!): GenerationRecord
  updateGenerationRecords(data: [GenerationRecordUpdateArgs!]!): [GenerationRecord]
  deleteGenerationRecord(where: GenerationRecordWhereUniqueInput!): GenerationRecord
  deleteGenerationRecords(where: [GenerationRecordWhereUniqueInput!]!): [GenerationRecord]
  createBalance(data: BalanceCreateInput!): Balance
  createBalances(data: [BalanceCreateInput!]!): [Balance]
  updateBalance(where: BalanceWhereUniqueInput!, data: BalanceUpdateInput!): Balance
  updateBalances(data: [BalanceUpdateArgs!]!): [Balance]
  deleteBalance(where: BalanceWhereUniqueInput!): Balance
  deleteBalances(where: [BalanceWhereUniqueInput!]!): [Balance]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  generationRecords(where: GenerationRecordWhereInput! = {}, orderBy: [GenerationRecordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GenerationRecordWhereUniqueInput): [GenerationRecord!]
  generationRecord(where: GenerationRecordWhereUniqueInput!): GenerationRecord
  generationRecordsCount(where: GenerationRecordWhereInput! = {}): Int
  balances(where: BalanceWhereInput! = {}, orderBy: [BalanceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BalanceWhereUniqueInput): [Balance!]
  balance(where: BalanceWhereUniqueInput!): Balance
  balancesCount(where: BalanceWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
